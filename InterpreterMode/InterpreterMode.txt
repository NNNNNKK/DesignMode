# 解释器模式（interpreter）：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，
该解释器通过解释这些句子来解决该问题。解释器模式就如同开发了一个编程语言或脚本给自己或别人用。
# 解释器模式好处：当有一个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。
1.容易地改变和扩展文法，因为该模式使用类来表示文法规则，可使用继承来改变或扩展该文法。
2.比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。
# 解释器模式缺点：
1.解释器模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法可能难以管理和维护。建议当文法非常复杂时，使用其他的技术
如语法分析程序或编译器生成器来处理。
